//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace ET
{

public sealed partial class SpellConfig: Bright.Config.BeanBase
{
    public SpellConfig(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Name = _buf.ReadString();
        SpellType = _buf.ReadString();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Spellkey = new SpellKey[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { SpellKey __e0;__e0 = (SpellKey)_buf.ReadInt(); Spellkey[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);AddAttrArg = new System.Collections.Generic.Dictionary<EnAttr, int>[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { System.Collections.Generic.Dictionary<EnAttr, int> __e0;{int n1 = System.Math.Min(_buf.ReadSize(), _buf.Size);__e0 = new System.Collections.Generic.Dictionary<EnAttr, int>(n1 * 3 / 2);for(var i1 = 0 ; i1 < n1 ; i1++) { EnAttr _k1;  _k1 = (EnAttr)_buf.ReadInt(); int _v1;  _v1 = _buf.ReadInt();     __e0.Add(_k1, _v1);}} AddAttrArg[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Arg = new System.Collections.Generic.List<int>[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { System.Collections.Generic.List<int> __e0;{int n1 = System.Math.Min(_buf.ReadSize(), _buf.Size);__e0 = new System.Collections.Generic.List<int>(n1);for(var i1 = 0 ; i1 < n1 ; i1++) { int _e1;  _e1 = _buf.ReadInt(); __e0.Add(_e1);}} Arg[__index0] = __e0;}}
        PostInit();
    }

    public static SpellConfig DeserializeSpellConfig(ByteBuf _buf)
    {
        return new SpellConfig(_buf);
    }

    public int Id { get; private set; }
    public string Name { get; private set; }
    /// <summary>
    /// 类型
    /// </summary>
    public string SpellType { get; private set; }
    public SpellKey[] Spellkey { get; private set; }
    public System.Collections.Generic.Dictionary<EnAttr, int>[] AddAttrArg { get; private set; }
    public System.Collections.Generic.List<int>[] Arg { get; private set; }

    public const int __ID__ = 1108056682;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, IConfigSingleton> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "SpellType:" + SpellType + ","
        + "Spellkey:" + Bright.Common.StringUtil.CollectionToString(Spellkey) + ","
        + "AddAttrArg:" + Bright.Common.StringUtil.CollectionToString(AddAttrArg) + ","
        + "Arg:" + Bright.Common.StringUtil.CollectionToString(Arg) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}